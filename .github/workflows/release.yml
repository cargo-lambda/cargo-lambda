name: Release

on:
  push:
    tags: [ 'v*' ]

env:
  MATURIN_VERSION: 1.8.2
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"
  CARGO_INCREMENTAL: 0

jobs:
  release-macos:
    name: Release ${{ matrix.platform.label }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: true
      matrix:
        platform:
          - target: aarch64-apple-darwin
            os: macos-latest
            label: MacOs (ARM)
          - target: x86_64-apple-darwin
            os: macos-13
            label: MacOS (Intel)
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Configure cache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Build
        uses: messense/maturin-action@v1
        with:
          maturin-version: ${{ env.MATURIN_VERSION }}
          target: ${{ matrix.platform.target }}
          args: --release --out dist --strip -m crates/cargo-lambda-cli/Cargo.toml
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform.target }}
          path: dist
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.target }}-${{ github.ref_name }}-bin
          path: target/${{ matrix.platform.target }}/release/cargo-lambda
          if-no-files-found: error

  release-windows:
    runs-on: windows-latest
    strategy:
      fail-fast: true
      matrix:
        platform:
          - arch: x64
            target: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v3
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Configure cache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Build
        uses: messense/maturin-action@v1
        with:
          maturin-version: ${{ env.MATURIN_VERSION }}
          target: ${{ matrix.platform.target }}
          args: --release --out dist --strip -m crates/cargo-lambda-cli/Cargo.toml
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform.target }}
          path: dist
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.platform.arch }}-${{ github.ref_name }}-bin
          path: target/${{ matrix.platform.target }}/release/cargo-lambda.exe
          if-no-files-found: error

  release-linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        platform: [
          { target: "x86_64-unknown-linux-musl", image_tag: "x86_64-musl" },
          { target: "aarch64-unknown-linux-musl", image_tag: "aarch64-musl" },
        ]
    container:
      image: ghcr.io/rust-cross/rust-musl-cross:${{ matrix.platform.image_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Store git commit
        run: |
          echo "CARGO_LAMBDA_RELEASE_GIT_SHA=$GITHUB_SHA" >> $GITHUB_ENV
      - name: Configure cache
        uses: mozilla-actions/sccache-action@v0.0.3
      - name: Build
        uses: messense/maturin-action@v1
        with:
          maturin-version: ${{ env.MATURIN_VERSION }}
          target: ${{ matrix.platform.target }}
          manylinux: auto
          container: off
          args: --release -o dist --strip -m crates/cargo-lambda-cli/Cargo.toml
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform.target }}
          path: dist
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.target }}-${{ github.ref_name }}-bin
          path: target/${{ matrix.platform.target }}/release/cargo-lambda
          if-no-files-found: error

  release-all:
    name: Release all artifacts
    runs-on: ubuntu-latest
    needs: [ release-macos, release-windows, release-linux ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: target/github-release
      - name: Create upload directory
        run: |
          mkdir -p target/upload

      - name: Package Windows files
        working-directory: target/github-release
        run: |
          make -f ../../Makefile build-release-zip tag=${{ github.ref_name }} target=windows-x64

      - name: Package macOS files
        working-directory: target/github-release
        run: |
          make -f ../../Makefile build-release-tar tag=${{ github.ref_name }} target=x86_64-apple-darwin
          make -f ../../Makefile build-release-tar tag=${{ github.ref_name }} target=aarch64-apple-darwin

      - name: Package Linux files
        working-directory: target/github-release
        run: |
          make -f ../../Makefile build-release-tar tag=${{ github.ref_name }} target=x86_64-unknown-linux-musl
          make -f ../../Makefile build-release-tar tag=${{ github.ref_name }} target=aarch64-unknown-linux-musl

      - name: Move release files to upload
        run: |
          mkdir -p target/upload
          mv target/github-release/*.tar.gz* target/upload
          mv target/github-release/*.zip* target/upload
          mv target/github-release/**/*.whl target/upload

      - name: Upload binaries to GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: target/upload/*
          prerelease: ${{ contains(github.ref_name, '-pre') }}
          generateReleaseNotes: true
